using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class Download : System.Web.UI.Page
{
    string _deployFilePath = string.Empty;
    protected void Page_Load(object sender, EventArgs e)
    {
        string appFileName = "CouthIntegration.application";
        _deployFilePath = Path.Combine(Server.MapPath("."), "publish", appFileName);
        DownloadFile();
    }

    private void DownloadFile()
    {
        DeployManifest deployManifest = ManifestReader.ReadManifest(_deployFilePath, true) as DeployManifest;
        deployManifest.UpdateEnabled = true;

        deployManifest.DeploymentUrl = (Request.Url.Scheme + @"://" + Request.Url.Host + Request.Url.AbsolutePath);
        deployManifest.ResolveFiles();
        deployManifest.UpdateFileInfo();

        string tempFileName = Path.GetTempFileName();
        ManifestWriter.WriteManifest(deployManifest, tempFileName);
        SignInstaller(tempFileName);

        string appFileName = "CouthIntegration.application";
        Response.ContentType = "application/x-ms-application";
        //Response.AppendHeader("content-disposition", "attachment; filename=ITS DotNet Secure Browser.application");
        Response.AppendHeader("content-disposition", string.Format("attachment; filename={0}.application", appFileName));
        byte[] bytes = File.ReadAllBytes(tempFileName);

        Response.BinaryWrite(bytes);
    }

    private void SignInstaller(string filePath)
    {
        string password = "pg";
        string certFilePath = Request.PhysicalPath.ToLower().Replace("download.aspx", "CouthIntegration_TemporaryKey.pfx");
        if (!File.Exists(certFilePath))
        {
            Response.StatusCode = (int)HttpStatusCode.NotFound;
            Response.StatusDescription = "Signing File not found";
            return;
        }

        X509Certificate2 cert = new X509Certificate2(certFilePath, password);
        SecurityUtilities.SignFile(cert, null, filePath);
    }
}